#!/bin/bash
# Simple script to create a circos plot between two FASTA files.

######################
### Get script DIR ###
######################
export SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

############
### Help ###
############
source ${SCRIPT_DIR}/../src/help.sh

################
### Defaults ###
################
export THREADS=1
export RESULTS="./results"
export FOFN=""
export LABELS=""
export LABELS_CONF=""
export TILES=""
export TILES_CONF=""
export FASTA=""
export FASTA_PREFIX=""
export FASTA_COLOR=""
export MINLEN=10000
export MINID=85
export MINLINKLEN=5000
export INTRACHR_FILE="links_concatenated_colored_no_intrachr.txt"
export INTRACHR_SHOW="no"
export GCWINDOW=5000
export GCSTEP=5000

######################################
### Function to filter FASTA files ###
######################################
source ${SCRIPT_DIR}/../src/filter.sh

##########################################
### Function to create karyotype files ###
##########################################
source ${SCRIPT_DIR}/../src/karyotypes.sh

#############################################
### Function to find links between fastas ###
#############################################
source ${SCRIPT_DIR}/../src/find_links.sh

#########################################################################
### Function to parse blastn (links) and create conf file with colors ###
#########################################################################
source ${SCRIPT_DIR}/../src/parse_links.sh

#############################################################################
### Function to sort and remove duplicates from links and karyotype files ###
#############################################################################
source ${SCRIPT_DIR}/../src/dedup.sh

###############################################
### Function to check which chrs have links ###
###############################################
source ${SCRIPT_DIR}/../src/check_links.sh

#########################################################
### Function to create GC skew file proper for Circos ###
#########################################################
source ${SCRIPT_DIR}/../src/gc_skew.sh

################################################
### Function to create feature labels config ###
################################################
source ${SCRIPT_DIR}/../src/labels.sh

###############################################
### Function to create feature TILES config ###
###############################################
source ${SCRIPT_DIR}/../src/tiles.sh

###########################################
### Function to create circos.conf file ###
###########################################
source ${SCRIPT_DIR}/../src/write_circos.sh

###############################
### Function to plot circos ###
###############################
source ${SCRIPT_DIR}/../src/plot_circos.sh

################################
### Get positional arguments ###
################################
# No arguments given
if [ $# -eq 0 ] ; then
    Help
    exit
fi

# arguments given
POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"
case $ARGS in
    -h|--help)
      Help
      exit
      ;;
    --threads)
      if [ "$2" ]; then
          export THREADS=$2
          shift 2
      else
          echo -e '\nERROR: "--threads" requires a numeric argument\n'
          exit
      fi
      ;;
    --outdir)
      export RESULTS=$2
      shift 2
      ;;
    --fofn)
      if [[ -f "$2" ]]; then
          if [[ -s "$2" && -z "$(tail -c 1 "$2")" ]]
          then
              echo "" > /dev/null ;
          else
              echo "" >> $2 ;
          fi
          export FOFN=$2
          shift 2
      else
          echo -e '\nERROR: "--fofn" requires an argument. Check your input.\n'
          exit
      fi
      ;;
    --labels)
      if [[ -f "$2" ]]; then
          export LABELS=$2
          shift 2
      else
          echo -e '\nERROR: "--labels" requires an argument. Check your input.\n'
          exit
      fi
      ;;
    --tiles)
      if [[ -f "$2" ]]; then
          export TILES=$2
          shift 2
      else
          echo -e '\nERROR: "--tiles" requires an argument. Check your input.\n'
          exit
      fi
      ;;
    --minlen)
      if [ "$2" ]; then
          export MINLEN=$2
          shift 2
      else
          echo -e '\nERROR: "--minlen" requires a numeric argument\n'
          exit
      fi
      ;;
    --minid)
      if [ "$2" ]; then
          export MINID=$2
          shift 2
      else
          echo -e '\nERROR: "--minid" requires a numeric argument\n'
          exit
      fi
      ;;
    --linklen)
      if [ "$2" ]; then
          export MINLINKLEN=$2
          shift 2
      else
          echo -e '\nERROR: "--linklen" requires a numeric argument\n'
          exit
      fi
      ;;
    --gc_window)
      if [ "$2" ]; then
          export GCWINDOW=$2
          shift 2
      else
          echo -e '\nERROR: "--gc_window" requires a numeric argument\n'
          exit
      fi
      ;;
    --gc_step)
      if [ "$2" ]; then
          export GCSTEP=$2
          shift 2
      else
          echo -e '\nERROR: "--gc_step" requires a numeric argument\n'
          exit
      fi
      ;;
    --show_intrachr)
        export INTRACHR_FILE="links_concatenated_colored.txt"
        export INTRACHR_SHOW="yes"
        shift
      ;;
    --gff2labels)
      source ${SCRIPT_DIR}/../src/gff2labels.sh
      export PATTERN=$2
      export ATTRIBUTE=$3
      export COLOR=$4
      export GFF=$5
      gff2labels
      exit
      ;;
    --gff2tiles)
      source ${SCRIPT_DIR}/../src/gff2tiles.sh
      export PATTERN=$2
      export COLOR=$3
      export GFF=$4
      gff2tiles
      exit
      ;;
    *)
      printf "******************************\n"
      printf "Error: Invalid argument $1\n"
      printf "******************************\n"
      exit 1
esac
done

###################
### Exec script ###
###################
source ${SCRIPT_DIR}/../src/workflow.sh
source ${SCRIPT_DIR}/../src/bye.sh
workflow
